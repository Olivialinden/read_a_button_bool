
read_a_button_2threads.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000354c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b8  080037b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037c0  080037c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080037c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000401c  20000010  080037d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000402c  080037d8  0002402c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d448  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002574  00000000  00000000  0002d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  000305b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002306c  00000000  00000000  00031058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef57  00000000  00000000  000540c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0cfe  00000000  00000000  0006301b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  00133d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003704 	.word	0x08003704

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003704 	.word	0x08003704

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <press_a_button>:

bool button_status = false;


void press_a_button(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	//When the button is pressed, button_status will become true.
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <press_a_button+0x20>)
 800051e:	f000 fd81 	bl	8001024 <HAL_GPIO_ReadPin>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <press_a_button+0x1a>
	    {
        button_status = true;
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <press_a_button+0x24>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
	    }
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40020800 	.word	0x40020800
 8000538:	2000002c 	.word	0x2000002c

0800053c <blink_a_led>:


void blink_a_led(void)
{   // if button_status is true then LED will turn on 1 second, then button_status will become false
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  if (button_status == true)
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <blink_a_led+0x38>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d013      	beq.n	8000570 <blink_a_led+0x34>
	        {
	     	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2120      	movs	r1, #32
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <blink_a_led+0x3c>)
 800054e:	f000 fd81 	bl	8001054 <HAL_GPIO_WritePin>
	          osDelay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000556:	f001 feac 	bl	80022b2 <osDelay>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <blink_a_led+0x3c>)
 8000560:	f000 fd78 	bl	8001054 <HAL_GPIO_WritePin>
	          osDelay(50);
 8000564:	2032      	movs	r0, #50	; 0x32
 8000566:	f001 fea4 	bl	80022b2 <osDelay>
	          button_status = false;
 800056a:	4b02      	ldr	r3, [pc, #8]	; (8000574 <blink_a_led+0x38>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	         }
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40020000 	.word	0x40020000

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000003c 	.word	0x2000003c
 80005ac:	20000090 	.word	0x20000090

080005b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0

  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_FREERTOS_Init+0x7c>)
 80005b8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fe22 	bl	800221a <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a15      	ldr	r2, [pc, #84]	; (8000630 <MX_FREERTOS_Init+0x80>)
 80005da:	6013      	str	r3, [r2, #0]

  /* definition and creation of press_a_button */
  osThreadDef(press_a_button, StartTask02, osPriorityIdle, 0, 128);
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_FREERTOS_Init+0x84>)
 80005de:	f107 0420 	add.w	r4, r7, #32
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  press_a_buttonHandle = osThreadCreate(osThread(press_a_button), NULL);
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fe0f 	bl	800221a <osThreadCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <MX_FREERTOS_Init+0x88>)
 8000600:	6013      	str	r3, [r2, #0]

  /* definition and creation of blink_a_led */
  osThreadDef(blink_a_led, StartTask03, osPriorityIdle, 0, 128);
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_FREERTOS_Init+0x8c>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink_a_ledHandle = osThreadCreate(osThread(blink_a_led), NULL);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fdfe 	bl	800221a <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <MX_FREERTOS_Init+0x90>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	3758      	adds	r7, #88	; 0x58
 8000628:	46bd      	mov	sp, r7
 800062a:	bdb0      	pop	{r4, r5, r7, pc}
 800062c:	08003744 	.word	0x08003744
 8000630:	20000030 	.word	0x20000030
 8000634:	08003760 	.word	0x08003760
 8000638:	20000034 	.word	0x20000034
 800063c:	0800377c 	.word	0x0800377c
 8000640:	20000038 	.word	0x20000038

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <MX_GPIO_Init+0xd0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a2c      	ldr	r2, [pc, #176]	; (8000714 <MX_GPIO_Init+0xd0>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <MX_GPIO_Init+0xd0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <MX_GPIO_Init+0xd0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a25      	ldr	r2, [pc, #148]	; (8000714 <MX_GPIO_Init+0xd0>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <MX_GPIO_Init+0xd0>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_GPIO_Init+0xd4>)
 80006d0:	f000 fcc0 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_GPIO_Init+0xd8>)
 80006ec:	f000 fb06 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f0:	2320      	movs	r3, #32
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0xd4>)
 8000708:	f000 faf8 	bl	8000cfc <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000
 800071c:	40020800 	.word	0x40020800

08000720 <main>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);


int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 f992 	bl	8000a4c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f80e 	bl	8000748 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ff8a 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000730:	f000 f8f0 	bl	8000914 <MX_USART2_UART_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000734:	f7ff ff3c 	bl	80005b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000738:	f001 fd68 	bl	800220c <osKernelStart>

  while (1)
 800073c:	e7fe      	b.n	800073c <main+0x1c>

0800073e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000742:	b672      	cpsid	i
}
 8000744:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000746:	e7fe      	b.n	8000746 <Error_Handler+0x8>

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2234      	movs	r2, #52	; 0x34
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f002 ffcc 	bl	80036f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <SystemClock_Config+0xd4>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a29      	ldr	r2, [pc, #164]	; (800081c <SystemClock_Config+0xd4>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <SystemClock_Config+0xd4>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	4b24      	ldr	r3, [pc, #144]	; (8000820 <SystemClock_Config+0xd8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <SystemClock_Config+0xd8>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <SystemClock_Config+0xd8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007bc:	2310      	movs	r3, #16
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 ffa0 	bl	800171c <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e2:	f7ff ffac 	bl	800073e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fc40 	bl	8001088 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800080e:	f7ff ff96 	bl	800073e <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	; 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f001 fd40 	bl	80022b2 <osDelay>
 8000832:	e7fb      	b.n	800082c <StartDefaultTask+0x8>

08000834 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    press_a_button();
 800083c:	f7ff fe6a 	bl	8000514 <press_a_button>
 8000840:	e7fc      	b.n	800083c <StartTask02+0x8>

08000842 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    blink_a_led();
 800084a:	f7ff fe77 	bl	800053c <blink_a_led>
 800084e:	e7fc      	b.n	800084a <StartTask03+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <HAL_MspInit+0x54>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x54>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_MspInit+0x54>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_MspInit+0x54>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 fa08 	bl	8000caa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f90a 	bl	8000af0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008dc:	f002 fa6c 	bl	8002db8 <xTaskGetSchedulerState>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d001      	beq.n	80008ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008e6:	f002 fca7 	bl	8003238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART2_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800094c:	f001 f984 	bl	8001c58 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f7ff fef2 	bl	800073e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000290 	.word	0x20000290
 8000964:	40004400 	.word	0x40004400

08000968 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12b      	bne.n	80009e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c2:	230c      	movs	r3, #12
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d2:	2307      	movs	r3, #7
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_UART_MspInit+0x8c>)
 80009de:	f000 f98d 	bl	8000cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004400 	.word	0x40004400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a14:	4c0b      	ldr	r4, [pc, #44]	; (8000a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a22:	f7ff ff65 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f002 fe41 	bl	80036ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fe79 	bl	8000720 <main>
  bx  lr    
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a3c:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 8000a40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a44:	2000402c 	.word	0x2000402c

08000a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <HAL_Init+0x40>)
 8000a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_Init+0x40>)
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x40>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f90d 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fee6 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f917 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f8ed 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200002d4 	.word	0x200002d4

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200002d4 	.word	0x200002d4

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff47 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff5c 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff8e 	bl	8000be8 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffb0 	bl	8000c50 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e165      	b.n	8000fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8154 	bne.w	8000fde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d005      	beq.n	8000d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d130      	bne.n	8000db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 0201 	and.w	r2, r3, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d017      	beq.n	8000dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d123      	bne.n	8000e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	69b9      	ldr	r1, [r7, #24]
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0203 	and.w	r2, r3, #3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80ae 	beq.w	8000fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b5d      	ldr	r3, [pc, #372]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a5c      	ldr	r2, [pc, #368]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b5a      	ldr	r3, [pc, #360]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9e:	4a58      	ldr	r2, [pc, #352]	; (8001000 <HAL_GPIO_Init+0x304>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4f      	ldr	r2, [pc, #316]	; (8001004 <HAL_GPIO_Init+0x308>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d025      	beq.n	8000f16 <HAL_GPIO_Init+0x21a>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4e      	ldr	r2, [pc, #312]	; (8001008 <HAL_GPIO_Init+0x30c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01f      	beq.n	8000f12 <HAL_GPIO_Init+0x216>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4d      	ldr	r2, [pc, #308]	; (800100c <HAL_GPIO_Init+0x310>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x212>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4c      	ldr	r2, [pc, #304]	; (8001010 <HAL_GPIO_Init+0x314>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4b      	ldr	r2, [pc, #300]	; (8001014 <HAL_GPIO_Init+0x318>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x20a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4a      	ldr	r2, [pc, #296]	; (8001018 <HAL_GPIO_Init+0x31c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x206>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a49      	ldr	r2, [pc, #292]	; (800101c <HAL_GPIO_Init+0x320>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x202>
 8000efa:	2306      	movs	r3, #6
 8000efc:	e00c      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e00a      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x21c>
 8000f16:	2300      	movs	r3, #0
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	f002 0203 	and.w	r2, r2, #3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f28:	4935      	ldr	r1, [pc, #212]	; (8001000 <HAL_GPIO_Init+0x304>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a31      	ldr	r2, [pc, #196]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a26      	ldr	r2, [pc, #152]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd8:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	f67f ae96 	bls.w	8000d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40013800 	.word	0x40013800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40020800 	.word	0x40020800
 8001010:	40020c00 	.word	0x40020c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40021400 	.word	0x40021400
 800101c:	40021800 	.word	0x40021800
 8001020:	40013c00 	.word	0x40013c00

08001024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e001      	b.n	8001046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0cc      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800109c:	4b68      	ldr	r3, [pc, #416]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d90c      	bls.n	80010c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b65      	ldr	r3, [pc, #404]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d001      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e0b8      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a58      	ldr	r2, [pc, #352]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	494d      	ldr	r1, [pc, #308]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 800110e:	4313      	orrs	r3, r2
 8001110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d044      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d107      	bne.n	8001136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b47      	ldr	r3, [pc, #284]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d119      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e07f      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d003      	beq.n	8001146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001142:	2b03      	cmp	r3, #3
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e06f      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e067      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f023 0203 	bic.w	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4934      	ldr	r1, [pc, #208]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	4313      	orrs	r3, r2
 8001176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001178:	f7ff fcce 	bl	8000b18 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	e00a      	b.n	8001196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001180:	f7ff fcca 	bl	8000b18 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e04f      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 020c 	and.w	r2, r3, #12
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d1eb      	bne.n	8001180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d20c      	bcs.n	80011d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e032      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4916      	ldr	r1, [pc, #88]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d009      	beq.n	800120e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	490e      	ldr	r1, [pc, #56]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800120e:	f000 f855 	bl	80012bc <HAL_RCC_GetSysClockFreq>
 8001212:	4602      	mov	r2, r0
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	490a      	ldr	r1, [pc, #40]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	5ccb      	ldrb	r3, [r1, r3]
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_RCC_ClockConfig+0x1c8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fc2e 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00
 8001244:	40023800 	.word	0x40023800
 8001248:	080037a0 	.word	0x080037a0
 800124c:	20000000 	.word	0x20000000
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_RCC_GetHCLKFreq+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000

0800126c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001270:	f7ff fff0 	bl	8001254 <HAL_RCC_GetHCLKFreq>
 8001274:	4602      	mov	r2, r0
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	0a9b      	lsrs	r3, r3, #10
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	4903      	ldr	r1, [pc, #12]	; (8001290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001282:	5ccb      	ldrb	r3, [r1, r3]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	080037b0 	.word	0x080037b0

08001294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001298:	f7ff ffdc 	bl	8001254 <HAL_RCC_GetHCLKFreq>
 800129c:	4602      	mov	r2, r0
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	0b5b      	lsrs	r3, r3, #13
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	4903      	ldr	r1, [pc, #12]	; (80012b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	080037b0 	.word	0x080037b0

080012bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012c0:	b0ae      	sub	sp, #184	; 0xb8
 80012c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012e2:	4bcb      	ldr	r3, [pc, #812]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	f200 8206 	bhi.w	80016fc <HAL_RCC_GetSysClockFreq+0x440>
 80012f0:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	0800132d 	.word	0x0800132d
 80012fc:	080016fd 	.word	0x080016fd
 8001300:	080016fd 	.word	0x080016fd
 8001304:	080016fd 	.word	0x080016fd
 8001308:	08001335 	.word	0x08001335
 800130c:	080016fd 	.word	0x080016fd
 8001310:	080016fd 	.word	0x080016fd
 8001314:	080016fd 	.word	0x080016fd
 8001318:	0800133d 	.word	0x0800133d
 800131c:	080016fd 	.word	0x080016fd
 8001320:	080016fd 	.word	0x080016fd
 8001324:	080016fd 	.word	0x080016fd
 8001328:	0800152d 	.word	0x0800152d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800132c:	4bb9      	ldr	r3, [pc, #740]	; (8001614 <HAL_RCC_GetSysClockFreq+0x358>)
 800132e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001332:	e1e7      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001334:	4bb8      	ldr	r3, [pc, #736]	; (8001618 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800133a:	e1e3      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800133c:	4bb4      	ldr	r3, [pc, #720]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001348:	4bb1      	ldr	r3, [pc, #708]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d071      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001354:	4bae      	ldr	r3, [pc, #696]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	2200      	movs	r2, #0
 800135c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001360:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800136c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800137a:	4622      	mov	r2, r4
 800137c:	462b      	mov	r3, r5
 800137e:	f04f 0000 	mov.w	r0, #0
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	0159      	lsls	r1, r3, #5
 8001388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800138c:	0150      	lsls	r0, r2, #5
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4621      	mov	r1, r4
 8001394:	1a51      	subs	r1, r2, r1
 8001396:	6439      	str	r1, [r7, #64]	; 0x40
 8001398:	4629      	mov	r1, r5
 800139a:	eb63 0301 	sbc.w	r3, r3, r1
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80013ac:	4649      	mov	r1, r9
 80013ae:	018b      	lsls	r3, r1, #6
 80013b0:	4641      	mov	r1, r8
 80013b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013b6:	4641      	mov	r1, r8
 80013b8:	018a      	lsls	r2, r1, #6
 80013ba:	4641      	mov	r1, r8
 80013bc:	1a51      	subs	r1, r2, r1
 80013be:	63b9      	str	r1, [r7, #56]	; 0x38
 80013c0:	4649      	mov	r1, r9
 80013c2:	eb63 0301 	sbc.w	r3, r3, r1
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80013d4:	4649      	mov	r1, r9
 80013d6:	00cb      	lsls	r3, r1, #3
 80013d8:	4641      	mov	r1, r8
 80013da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013de:	4641      	mov	r1, r8
 80013e0:	00ca      	lsls	r2, r1, #3
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	4622      	mov	r2, r4
 80013ea:	189b      	adds	r3, r3, r2
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
 80013ee:	462b      	mov	r3, r5
 80013f0:	460a      	mov	r2, r1
 80013f2:	eb42 0303 	adc.w	r3, r2, r3
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001404:	4629      	mov	r1, r5
 8001406:	024b      	lsls	r3, r1, #9
 8001408:	4621      	mov	r1, r4
 800140a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800140e:	4621      	mov	r1, r4
 8001410:	024a      	lsls	r2, r1, #9
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800141a:	2200      	movs	r2, #0
 800141c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001420:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001424:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001428:	f7fe fef2 	bl	8000210 <__aeabi_uldivmod>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4613      	mov	r3, r2
 8001432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001436:	e067      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4b75      	ldr	r3, [pc, #468]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001444:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800144c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001450:	67bb      	str	r3, [r7, #120]	; 0x78
 8001452:	2300      	movs	r3, #0
 8001454:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001456:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800145a:	4622      	mov	r2, r4
 800145c:	462b      	mov	r3, r5
 800145e:	f04f 0000 	mov.w	r0, #0
 8001462:	f04f 0100 	mov.w	r1, #0
 8001466:	0159      	lsls	r1, r3, #5
 8001468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800146c:	0150      	lsls	r0, r2, #5
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4621      	mov	r1, r4
 8001474:	1a51      	subs	r1, r2, r1
 8001476:	62b9      	str	r1, [r7, #40]	; 0x28
 8001478:	4629      	mov	r1, r5
 800147a:	eb63 0301 	sbc.w	r3, r3, r1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800148c:	4649      	mov	r1, r9
 800148e:	018b      	lsls	r3, r1, #6
 8001490:	4641      	mov	r1, r8
 8001492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001496:	4641      	mov	r1, r8
 8001498:	018a      	lsls	r2, r1, #6
 800149a:	4641      	mov	r1, r8
 800149c:	ebb2 0a01 	subs.w	sl, r2, r1
 80014a0:	4649      	mov	r1, r9
 80014a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014ba:	4692      	mov	sl, r2
 80014bc:	469b      	mov	fp, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	eb1a 0303 	adds.w	r3, sl, r3
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	462b      	mov	r3, r5
 80014c8:	eb4b 0303 	adc.w	r3, fp, r3
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014da:	4629      	mov	r1, r5
 80014dc:	028b      	lsls	r3, r1, #10
 80014de:	4621      	mov	r1, r4
 80014e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014e4:	4621      	mov	r1, r4
 80014e6:	028a      	lsls	r2, r1, #10
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014f0:	2200      	movs	r2, #0
 80014f2:	673b      	str	r3, [r7, #112]	; 0x70
 80014f4:	677a      	str	r2, [r7, #116]	; 0x74
 80014f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014fa:	f7fe fe89 	bl	8000210 <__aeabi_uldivmod>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4613      	mov	r3, r2
 8001504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001508:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	0c1b      	lsrs	r3, r3, #16
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	3301      	adds	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800151a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800151e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800152a:	e0eb      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d06b      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	099b      	lsrs	r3, r3, #6
 800154a:	2200      	movs	r2, #0
 800154c:	66bb      	str	r3, [r7, #104]	; 0x68
 800154e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001556:	663b      	str	r3, [r7, #96]	; 0x60
 8001558:	2300      	movs	r3, #0
 800155a:	667b      	str	r3, [r7, #100]	; 0x64
 800155c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001560:	4622      	mov	r2, r4
 8001562:	462b      	mov	r3, r5
 8001564:	f04f 0000 	mov.w	r0, #0
 8001568:	f04f 0100 	mov.w	r1, #0
 800156c:	0159      	lsls	r1, r3, #5
 800156e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001572:	0150      	lsls	r0, r2, #5
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4621      	mov	r1, r4
 800157a:	1a51      	subs	r1, r2, r1
 800157c:	61b9      	str	r1, [r7, #24]
 800157e:	4629      	mov	r1, r5
 8001580:	eb63 0301 	sbc.w	r3, r3, r1
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001592:	4659      	mov	r1, fp
 8001594:	018b      	lsls	r3, r1, #6
 8001596:	4651      	mov	r1, sl
 8001598:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159c:	4651      	mov	r1, sl
 800159e:	018a      	lsls	r2, r1, #6
 80015a0:	4651      	mov	r1, sl
 80015a2:	ebb2 0801 	subs.w	r8, r2, r1
 80015a6:	4659      	mov	r1, fp
 80015a8:	eb63 0901 	sbc.w	r9, r3, r1
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015c0:	4690      	mov	r8, r2
 80015c2:	4699      	mov	r9, r3
 80015c4:	4623      	mov	r3, r4
 80015c6:	eb18 0303 	adds.w	r3, r8, r3
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	462b      	mov	r3, r5
 80015ce:	eb49 0303 	adc.w	r3, r9, r3
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015e0:	4629      	mov	r1, r5
 80015e2:	024b      	lsls	r3, r1, #9
 80015e4:	4621      	mov	r1, r4
 80015e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015ea:	4621      	mov	r1, r4
 80015ec:	024a      	lsls	r2, r1, #9
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015f6:	2200      	movs	r2, #0
 80015f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80015fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001600:	f7fe fe06 	bl	8000210 <__aeabi_uldivmod>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4613      	mov	r3, r2
 800160a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800160e:	e065      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x420>
 8001610:	40023800 	.word	0x40023800
 8001614:	00f42400 	.word	0x00f42400
 8001618:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161c:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_RCC_GetSysClockFreq+0x458>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	2200      	movs	r2, #0
 8001624:	4618      	mov	r0, r3
 8001626:	4611      	mov	r1, r2
 8001628:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800162c:	653b      	str	r3, [r7, #80]	; 0x50
 800162e:	2300      	movs	r3, #0
 8001630:	657b      	str	r3, [r7, #84]	; 0x54
 8001632:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001636:	4642      	mov	r2, r8
 8001638:	464b      	mov	r3, r9
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	0159      	lsls	r1, r3, #5
 8001644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001648:	0150      	lsls	r0, r2, #5
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4641      	mov	r1, r8
 8001650:	1a51      	subs	r1, r2, r1
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	4649      	mov	r1, r9
 8001656:	eb63 0301 	sbc.w	r3, r3, r1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001668:	4659      	mov	r1, fp
 800166a:	018b      	lsls	r3, r1, #6
 800166c:	4651      	mov	r1, sl
 800166e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001672:	4651      	mov	r1, sl
 8001674:	018a      	lsls	r2, r1, #6
 8001676:	4651      	mov	r1, sl
 8001678:	1a54      	subs	r4, r2, r1
 800167a:	4659      	mov	r1, fp
 800167c:	eb63 0501 	sbc.w	r5, r3, r1
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	00eb      	lsls	r3, r5, #3
 800168a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800168e:	00e2      	lsls	r2, r4, #3
 8001690:	4614      	mov	r4, r2
 8001692:	461d      	mov	r5, r3
 8001694:	4643      	mov	r3, r8
 8001696:	18e3      	adds	r3, r4, r3
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	464b      	mov	r3, r9
 800169c:	eb45 0303 	adc.w	r3, r5, r3
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016ae:	4629      	mov	r1, r5
 80016b0:	028b      	lsls	r3, r1, #10
 80016b2:	4621      	mov	r1, r4
 80016b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b8:	4621      	mov	r1, r4
 80016ba:	028a      	lsls	r2, r1, #10
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016c4:	2200      	movs	r2, #0
 80016c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80016ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016ce:	f7fe fd9f 	bl	8000210 <__aeabi_uldivmod>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4613      	mov	r3, r2
 80016d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RCC_GetSysClockFreq+0x458>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0f1b      	lsrs	r3, r3, #28
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80016ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016fa:	e003      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001702:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001708:	4618      	mov	r0, r3
 800170a:	37b8      	adds	r7, #184	; 0xb8
 800170c:	46bd      	mov	sp, r7
 800170e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	00f42400 	.word	0x00f42400

0800171c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e28d      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8083 	beq.w	8001842 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800173c:	4b94      	ldr	r3, [pc, #592]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b04      	cmp	r3, #4
 8001746:	d019      	beq.n	800177c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001748:	4b91      	ldr	r3, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001750:	2b08      	cmp	r3, #8
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001754:	4b8e      	ldr	r3, [pc, #568]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001760:	d00c      	beq.n	800177c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001762:	4b8b      	ldr	r3, [pc, #556]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d112      	bne.n	8001794 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176e:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800177a:	d10b      	bne.n	8001794 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	4b84      	ldr	r3, [pc, #528]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d05b      	beq.n	8001840 <HAL_RCC_OscConfig+0x124>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d157      	bne.n	8001840 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e25a      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179c:	d106      	bne.n	80017ac <HAL_RCC_OscConfig+0x90>
 800179e:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7b      	ldr	r2, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0xcc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0xb4>
 80017b6:	4b76      	ldr	r3, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a75      	ldr	r2, [pc, #468]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a72      	ldr	r2, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xcc>
 80017d0:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6e      	ldr	r2, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6b      	ldr	r2, [pc, #428]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff f992 	bl	8000b18 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff f98e 	bl	8000b18 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e21f      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b61      	ldr	r3, [pc, #388]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0xdc>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f97e 	bl	8000b18 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff f97a 	bl	8000b18 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e20b      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	4b57      	ldr	r3, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x104>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06f      	beq.n	800192e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800184e:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b00      	cmp	r3, #0
 8001858:	d017      	beq.n	800188a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800185a:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001862:	2b08      	cmp	r3, #8
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001866:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d11c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187e:	4b44      	ldr	r3, [pc, #272]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d116      	bne.n	80018b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <HAL_RCC_OscConfig+0x186>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e1d3      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4937      	ldr	r1, [pc, #220]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	e03a      	b.n	800192e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c0:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_RCC_OscConfig+0x278>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f927 	bl	8000b18 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff f923 	bl	8000b18 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1b4      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4925      	ldr	r1, [pc, #148]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
 8001900:	e015      	b.n	800192e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x278>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f906 	bl	8000b18 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001910:	f7ff f902 	bl	8000b18 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e193      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d036      	beq.n	80019a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff f8e6 	bl	8000b18 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001950:	f7ff f8e2 	bl	8000b18 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e173      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x234>
 800196e:	e01b      	b.n	80019a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff f8cf 	bl	8000b18 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	e00e      	b.n	800199c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff f8cb 	bl	8000b18 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d907      	bls.n	800199c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e15c      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
 8001990:	40023800 	.word	0x40023800
 8001994:	42470000 	.word	0x42470000
 8001998:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	4b8a      	ldr	r3, [pc, #552]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 800199e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1ea      	bne.n	800197e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8097 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ba:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10f      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b7f      	ldr	r3, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a7e      	ldr	r2, [pc, #504]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e2:	2301      	movs	r3, #1
 80019e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <HAL_RCC_OscConfig+0x4b0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d118      	bne.n	8001a24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f2:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x4b0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a75      	ldr	r2, [pc, #468]	; (8001bcc <HAL_RCC_OscConfig+0x4b0>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f88b 	bl	8000b18 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7ff f887 	bl	8000b18 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e118      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x4b0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x31e>
 8001a2c:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a65      	ldr	r2, [pc, #404]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	e01c      	b.n	8001a74 <HAL_RCC_OscConfig+0x358>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x340>
 8001a42:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a60      	ldr	r2, [pc, #384]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	4a5d      	ldr	r2, [pc, #372]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0x358>
 8001a5c:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a59      	ldr	r2, [pc, #356]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	4a56      	ldr	r2, [pc, #344]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	f023 0304 	bic.w	r3, r3, #4
 8001a72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d015      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f84c 	bl	8000b18 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff f848 	bl	8000b18 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0d7      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0ee      	beq.n	8001a84 <HAL_RCC_OscConfig+0x368>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f836 	bl	8000b18 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f832 	bl	8000b18 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e0c1      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ee      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	4a3a      	ldr	r2, [pc, #232]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80ad 	beq.w	8001c48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d060      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d145      	bne.n	8001b8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <HAL_RCC_OscConfig+0x4b4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff f806 	bl	8000b18 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f802 	bl	8000b18 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e093      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	041b      	lsls	r3, r3, #16
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	071b      	lsls	r3, r3, #28
 8001b5a:	491b      	ldr	r1, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCC_OscConfig+0x4b4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7fe ffd7 	bl	8000b18 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe ffd3 	bl	8000b18 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e064      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x452>
 8001b8c:	e05c      	b.n	8001c48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_RCC_OscConfig+0x4b4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7fe ffc0 	bl	8000b18 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7fe ffbc 	bl	8000b18 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04d      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x480>
 8001bba:	e045      	b.n	8001c48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e040      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_RCC_OscConfig+0x538>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d030      	beq.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d129      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d122      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d119      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d10f      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e03f      	b.n	8001cea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fe72 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	; 0x24
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f829 	bl	8001cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf8:	b0c0      	sub	sp, #256	; 0x100
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d10:	68d9      	ldr	r1, [r3, #12]
 8001d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	ea40 0301 	orr.w	r3, r0, r1
 8001d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d4c:	f021 010c 	bic.w	r1, r1, #12
 8001d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6e:	6999      	ldr	r1, [r3, #24]
 8001d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	ea40 0301 	orr.w	r3, r0, r1
 8001d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b8f      	ldr	r3, [pc, #572]	; (8001fc0 <UART_SetConfig+0x2cc>)
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d005      	beq.n	8001d94 <UART_SetConfig+0xa0>
 8001d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b8d      	ldr	r3, [pc, #564]	; (8001fc4 <UART_SetConfig+0x2d0>)
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d104      	bne.n	8001d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d94:	f7ff fa7e 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 8001d98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d9c:	e003      	b.n	8001da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d9e:	f7ff fa65 	bl	800126c <HAL_RCC_GetPCLK1Freq>
 8001da2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db0:	f040 810c 	bne.w	8001fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001db8:	2200      	movs	r2, #0
 8001dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	462b      	mov	r3, r5
 8001dca:	1891      	adds	r1, r2, r2
 8001dcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8001dce:	415b      	adcs	r3, r3
 8001dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	eb12 0801 	adds.w	r8, r2, r1
 8001ddc:	4629      	mov	r1, r5
 8001dde:	eb43 0901 	adc.w	r9, r3, r1
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001df6:	4690      	mov	r8, r2
 8001df8:	4699      	mov	r9, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	eb18 0303 	adds.w	r3, r8, r3
 8001e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e04:	462b      	mov	r3, r5
 8001e06:	eb49 0303 	adc.w	r3, r9, r3
 8001e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e22:	460b      	mov	r3, r1
 8001e24:	18db      	adds	r3, r3, r3
 8001e26:	653b      	str	r3, [r7, #80]	; 0x50
 8001e28:	4613      	mov	r3, r2
 8001e2a:	eb42 0303 	adc.w	r3, r2, r3
 8001e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8001e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e38:	f7fe f9ea 	bl	8000210 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <UART_SetConfig+0x2d4>)
 8001e42:	fba3 2302 	umull	r2, r3, r3, r2
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	011c      	lsls	r4, r3, #4
 8001e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e5c:	4642      	mov	r2, r8
 8001e5e:	464b      	mov	r3, r9
 8001e60:	1891      	adds	r1, r2, r2
 8001e62:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e64:	415b      	adcs	r3, r3
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8001e72:	4649      	mov	r1, r9
 8001e74:	eb43 0b01 	adc.w	fp, r3, r1
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e8c:	4692      	mov	sl, r2
 8001e8e:	469b      	mov	fp, r3
 8001e90:	4643      	mov	r3, r8
 8001e92:	eb1a 0303 	adds.w	r3, sl, r3
 8001e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e9a:	464b      	mov	r3, r9
 8001e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8001ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	18db      	adds	r3, r3, r3
 8001ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	eb42 0303 	adc.w	r3, r2, r3
 8001ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ece:	f7fe f99f 	bl	8000210 <__aeabi_uldivmod>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <UART_SetConfig+0x2d4>)
 8001eda:	fba3 2301 	umull	r2, r3, r3, r1
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2264      	movs	r2, #100	; 0x64
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	1acb      	subs	r3, r1, r3
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <UART_SetConfig+0x2d4>)
 8001ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001efc:	441c      	add	r4, r3
 8001efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f02:	2200      	movs	r2, #0
 8001f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f10:	4642      	mov	r2, r8
 8001f12:	464b      	mov	r3, r9
 8001f14:	1891      	adds	r1, r2, r2
 8001f16:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f18:	415b      	adcs	r3, r3
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f20:	4641      	mov	r1, r8
 8001f22:	1851      	adds	r1, r2, r1
 8001f24:	6339      	str	r1, [r7, #48]	; 0x30
 8001f26:	4649      	mov	r1, r9
 8001f28:	414b      	adcs	r3, r1
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f38:	4659      	mov	r1, fp
 8001f3a:	00cb      	lsls	r3, r1, #3
 8001f3c:	4651      	mov	r1, sl
 8001f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f42:	4651      	mov	r1, sl
 8001f44:	00ca      	lsls	r2, r1, #3
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	189b      	adds	r3, r3, r2
 8001f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f54:	464b      	mov	r3, r9
 8001f56:	460a      	mov	r2, r1
 8001f58:	eb42 0303 	adc.w	r3, r2, r3
 8001f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f74:	460b      	mov	r3, r1
 8001f76:	18db      	adds	r3, r3, r3
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	eb42 0303 	adc.w	r3, r2, r3
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f8a:	f7fe f941 	bl	8000210 <__aeabi_uldivmod>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <UART_SetConfig+0x2d4>)
 8001f94:	fba3 1302 	umull	r1, r3, r3, r2
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	2164      	movs	r1, #100	; 0x64
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	3332      	adds	r3, #50	; 0x32
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <UART_SetConfig+0x2d4>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	f003 0207 	and.w	r2, r3, #7
 8001fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4422      	add	r2, r4
 8001fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fbc:	e105      	b.n	80021ca <UART_SetConfig+0x4d6>
 8001fbe:	bf00      	nop
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40011400 	.word	0x40011400
 8001fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001fde:	4642      	mov	r2, r8
 8001fe0:	464b      	mov	r3, r9
 8001fe2:	1891      	adds	r1, r2, r2
 8001fe4:	6239      	str	r1, [r7, #32]
 8001fe6:	415b      	adcs	r3, r3
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fee:	4641      	mov	r1, r8
 8001ff0:	1854      	adds	r4, r2, r1
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	eb43 0501 	adc.w	r5, r3, r1
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	00eb      	lsls	r3, r5, #3
 8002002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002006:	00e2      	lsls	r2, r4, #3
 8002008:	4614      	mov	r4, r2
 800200a:	461d      	mov	r5, r3
 800200c:	4643      	mov	r3, r8
 800200e:	18e3      	adds	r3, r4, r3
 8002010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002014:	464b      	mov	r3, r9
 8002016:	eb45 0303 	adc.w	r3, r5, r3
 800201a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800201e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800202a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800203a:	4629      	mov	r1, r5
 800203c:	008b      	lsls	r3, r1, #2
 800203e:	4621      	mov	r1, r4
 8002040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002044:	4621      	mov	r1, r4
 8002046:	008a      	lsls	r2, r1, #2
 8002048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800204c:	f7fe f8e0 	bl	8000210 <__aeabi_uldivmod>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4b60      	ldr	r3, [pc, #384]	; (80021d8 <UART_SetConfig+0x4e4>)
 8002056:	fba3 2302 	umull	r2, r3, r3, r2
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	011c      	lsls	r4, r3, #4
 800205e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002062:	2200      	movs	r2, #0
 8002064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002068:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800206c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002070:	4642      	mov	r2, r8
 8002072:	464b      	mov	r3, r9
 8002074:	1891      	adds	r1, r2, r2
 8002076:	61b9      	str	r1, [r7, #24]
 8002078:	415b      	adcs	r3, r3
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002080:	4641      	mov	r1, r8
 8002082:	1851      	adds	r1, r2, r1
 8002084:	6139      	str	r1, [r7, #16]
 8002086:	4649      	mov	r1, r9
 8002088:	414b      	adcs	r3, r1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002098:	4659      	mov	r1, fp
 800209a:	00cb      	lsls	r3, r1, #3
 800209c:	4651      	mov	r1, sl
 800209e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020a2:	4651      	mov	r1, sl
 80020a4:	00ca      	lsls	r2, r1, #3
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	4642      	mov	r2, r8
 80020ae:	189b      	adds	r3, r3, r2
 80020b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020b4:	464b      	mov	r3, r9
 80020b6:	460a      	mov	r2, r1
 80020b8:	eb42 0303 	adc.w	r3, r2, r3
 80020bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80020ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80020d8:	4649      	mov	r1, r9
 80020da:	008b      	lsls	r3, r1, #2
 80020dc:	4641      	mov	r1, r8
 80020de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020e2:	4641      	mov	r1, r8
 80020e4:	008a      	lsls	r2, r1, #2
 80020e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020ea:	f7fe f891 	bl	8000210 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <UART_SetConfig+0x4e4>)
 80020f4:	fba3 1302 	umull	r1, r3, r3, r2
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	2164      	movs	r1, #100	; 0x64
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	3332      	adds	r3, #50	; 0x32
 8002106:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <UART_SetConfig+0x4e4>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002112:	441c      	add	r4, r3
 8002114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002118:	2200      	movs	r2, #0
 800211a:	673b      	str	r3, [r7, #112]	; 0x70
 800211c:	677a      	str	r2, [r7, #116]	; 0x74
 800211e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002122:	4642      	mov	r2, r8
 8002124:	464b      	mov	r3, r9
 8002126:	1891      	adds	r1, r2, r2
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	415b      	adcs	r3, r3
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002132:	4641      	mov	r1, r8
 8002134:	1851      	adds	r1, r2, r1
 8002136:	6039      	str	r1, [r7, #0]
 8002138:	4649      	mov	r1, r9
 800213a:	414b      	adcs	r3, r1
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800214a:	4659      	mov	r1, fp
 800214c:	00cb      	lsls	r3, r1, #3
 800214e:	4651      	mov	r1, sl
 8002150:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002154:	4651      	mov	r1, sl
 8002156:	00ca      	lsls	r2, r1, #3
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	4603      	mov	r3, r0
 800215e:	4642      	mov	r2, r8
 8002160:	189b      	adds	r3, r3, r2
 8002162:	66bb      	str	r3, [r7, #104]	; 0x68
 8002164:	464b      	mov	r3, r9
 8002166:	460a      	mov	r2, r1
 8002168:	eb42 0303 	adc.w	r3, r2, r3
 800216c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	663b      	str	r3, [r7, #96]	; 0x60
 8002178:	667a      	str	r2, [r7, #100]	; 0x64
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002186:	4649      	mov	r1, r9
 8002188:	008b      	lsls	r3, r1, #2
 800218a:	4641      	mov	r1, r8
 800218c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002190:	4641      	mov	r1, r8
 8002192:	008a      	lsls	r2, r1, #2
 8002194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002198:	f7fe f83a 	bl	8000210 <__aeabi_uldivmod>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <UART_SetConfig+0x4e4>)
 80021a2:	fba3 1302 	umull	r1, r3, r3, r2
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2164      	movs	r1, #100	; 0x64
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	3332      	adds	r3, #50	; 0x32
 80021b4:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <UART_SetConfig+0x4e4>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4422      	add	r2, r4
 80021c8:	609a      	str	r2, [r3, #8]
}
 80021ca:	bf00      	nop
 80021cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021d6:	bf00      	nop
 80021d8:	51eb851f 	.word	0x51eb851f

080021dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ee:	2b84      	cmp	r3, #132	; 0x84
 80021f0:	d005      	beq.n	80021fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	3303      	adds	r3, #3
 80021fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002210:	f000 fade 	bl	80027d0 <vTaskStartScheduler>
  
  return osOK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}

0800221a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	b089      	sub	sp, #36	; 0x24
 800221e:	af04      	add	r7, sp, #16
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <osThreadCreate+0x54>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01c      	beq.n	800226e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685c      	ldr	r4, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681d      	ldr	r5, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691e      	ldr	r6, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ffc8 	bl	80021dc <makeFreeRtosPriority>
 800224c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002256:	9202      	str	r2, [sp, #8]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	9100      	str	r1, [sp, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4632      	mov	r2, r6
 8002260:	4629      	mov	r1, r5
 8002262:	4620      	mov	r0, r4
 8002264:	f000 f8ed 	bl	8002442 <xTaskCreateStatic>
 8002268:	4603      	mov	r3, r0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e01c      	b.n	80022a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685c      	ldr	r4, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800227a:	b29e      	uxth	r6, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ffaa 	bl	80021dc <makeFreeRtosPriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	9200      	str	r2, [sp, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	4632      	mov	r2, r6
 8002296:	4629      	mov	r1, r5
 8002298:	4620      	mov	r0, r4
 800229a:	f000 f92f 	bl	80024fc <xTaskCreate>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d001      	beq.n	80022a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80022a8:	68fb      	ldr	r3, [r7, #12]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <osDelay+0x16>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	e000      	b.n	80022ca <osDelay+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa4c 	bl	8002768 <vTaskDelay>
  
  return osOK;
 80022d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0208 	add.w	r2, r3, #8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f04f 32ff 	mov.w	r2, #4294967295
 80022f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0208 	add.w	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f103 0208 	add.w	r2, r3, #8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d103      	bne.n	800239c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e00c      	b.n	80023b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3308      	adds	r3, #8
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e002      	b.n	80023aa <vListInsert+0x2e>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d2f6      	bcs.n	80023a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6892      	ldr	r2, [r2, #8]
 8002404:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6852      	ldr	r2, [r2, #4]
 800240e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d103      	bne.n	8002422 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002442:	b580      	push	{r7, lr}
 8002444:	b08e      	sub	sp, #56	; 0x38
 8002446:	af04      	add	r7, sp, #16
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245a:	f383 8811 	msr	BASEPRI, r3
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002468:	bf00      	nop
 800246a:	e7fe      	b.n	800246a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800246c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <xTaskCreateStatic+0x46>
	__asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	61fb      	str	r3, [r7, #28]
}
 8002484:	bf00      	nop
 8002486:	e7fe      	b.n	8002486 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002488:	2354      	movs	r3, #84	; 0x54
 800248a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b54      	cmp	r3, #84	; 0x54
 8002490:	d00a      	beq.n	80024a8 <xTaskCreateStatic+0x66>
	__asm volatile
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	61bb      	str	r3, [r7, #24]
}
 80024a4:	bf00      	nop
 80024a6:	e7fe      	b.n	80024a6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80024a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01e      	beq.n	80024ee <xTaskCreateStatic+0xac>
 80024b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01b      	beq.n	80024ee <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024c8:	2300      	movs	r3, #0
 80024ca:	9303      	str	r3, [sp, #12]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	9302      	str	r3, [sp, #8]
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f850 	bl	8002586 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024e8:	f000 f8d4 	bl	8002694 <prvAddNewTaskToReadyList>
 80024ec:	e001      	b.n	80024f2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80024f2:	697b      	ldr	r3, [r7, #20]
	}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3728      	adds	r7, #40	; 0x28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af04      	add	r7, sp, #16
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fee1 	bl	80032d8 <pvPortMalloc>
 8002516:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00e      	beq.n	800253c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800251e:	2054      	movs	r0, #84	; 0x54
 8002520:	f000 feda 	bl	80032d8 <pvPortMalloc>
 8002524:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
 8002532:	e005      	b.n	8002540 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002534:	6978      	ldr	r0, [r7, #20]
 8002536:	f000 ff9b 	bl	8003470 <vPortFree>
 800253a:	e001      	b.n	8002540 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d017      	beq.n	8002576 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	2300      	movs	r3, #0
 8002552:	9303      	str	r3, [sp, #12]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	9302      	str	r3, [sp, #8]
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f80e 	bl	8002586 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800256a:	69f8      	ldr	r0, [r7, #28]
 800256c:	f000 f892 	bl	8002694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002570:	2301      	movs	r3, #1
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e002      	b.n	800257c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800257c:	69bb      	ldr	r3, [r7, #24]
	}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b088      	sub	sp, #32
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800259e:	3b01      	subs	r3, #1
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f023 0307 	bic.w	r3, r3, #7
 80025ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <prvInitialiseNewTask+0x48>
	__asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	617b      	str	r3, [r7, #20]
}
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01f      	beq.n	8002614 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	e012      	b.n	8002600 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	7819      	ldrb	r1, [r3, #0]
 80025e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	3334      	adds	r3, #52	; 0x34
 80025ea:	460a      	mov	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	d9e9      	bls.n	80025da <prvInitialiseNewTask+0x54>
 8002606:	e000      	b.n	800260a <prvInitialiseNewTask+0x84>
			{
				break;
 8002608:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002612:	e003      	b.n	800261c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261e:	2b06      	cmp	r3, #6
 8002620:	d901      	bls.n	8002626 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002622:	2306      	movs	r3, #6
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	2200      	movs	r2, #0
 8002636:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	3304      	adds	r3, #4
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fe6c 	bl	800231a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	3318      	adds	r3, #24
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fe67 	bl	800231a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002650:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	f1c3 0207 	rsb	r2, r3, #7
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2200      	movs	r2, #0
 8002666:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	69b8      	ldr	r0, [r7, #24]
 8002676:	f000 fc23 	bl	8002ec0 <pxPortInitialiseStack>
 800267a:	4602      	mov	r2, r0
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800269c:	f000 fd3a 	bl	8003114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <prvAddNewTaskToReadyList+0xb8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	4a29      	ldr	r2, [pc, #164]	; (800274c <prvAddNewTaskToReadyList+0xb8>)
 80026a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026b2:	4a27      	ldr	r2, [pc, #156]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <prvAddNewTaskToReadyList+0xb8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d110      	bne.n	80026e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80026c0:	f000 fabc 	bl	8002c3c <prvInitialiseTaskLists>
 80026c4:	e00d      	b.n	80026e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <prvAddNewTaskToReadyList+0xc0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d802      	bhi.n	80026e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026dc:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <prvAddNewTaskToReadyList+0xc4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <prvAddNewTaskToReadyList+0xc4>)
 80026ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	2201      	movs	r2, #1
 80026f2:	409a      	lsls	r2, r3
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <prvAddNewTaskToReadyList+0xc8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <prvAddNewTaskToReadyList+0xc8>)
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <prvAddNewTaskToReadyList+0xcc>)
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f7ff fe0d 	bl	8002334 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800271a:	f000 fd2b 	bl	8003174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <prvAddNewTaskToReadyList+0xc0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00e      	beq.n	8002744 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <prvAddNewTaskToReadyList+0xd0>)
 8002736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200003d8 	.word	0x200003d8
 8002750:	200002d8 	.word	0x200002d8
 8002754:	200003e4 	.word	0x200003e4
 8002758:	200003f4 	.word	0x200003f4
 800275c:	200003e0 	.word	0x200003e0
 8002760:	200002dc 	.word	0x200002dc
 8002764:	e000ed04 	.word	0xe000ed04

08002768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d017      	beq.n	80027aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <vTaskDelay+0x60>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <vTaskDelay+0x30>
	__asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	60bb      	str	r3, [r7, #8]
}
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002798:	f000 f87a 	bl	8002890 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800279c:	2100      	movs	r1, #0
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fb28 	bl	8002df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80027a4:	f000 f882 	bl	80028ac <xTaskResumeAll>
 80027a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <vTaskDelay+0x64>)
 80027b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000400 	.word	0x20000400
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027de:	463a      	mov	r2, r7
 80027e0:	1d39      	adds	r1, r7, #4
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd fec8 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	9202      	str	r2, [sp, #8]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	2300      	movs	r3, #0
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2300      	movs	r3, #0
 80027fc:	460a      	mov	r2, r1
 80027fe:	491e      	ldr	r1, [pc, #120]	; (8002878 <vTaskStartScheduler+0xa8>)
 8002800:	481e      	ldr	r0, [pc, #120]	; (800287c <vTaskStartScheduler+0xac>)
 8002802:	f7ff fe1e 	bl	8002442 <xTaskCreateStatic>
 8002806:	4603      	mov	r3, r0
 8002808:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <vTaskStartScheduler+0xb0>)
 800280a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <vTaskStartScheduler+0xb0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002814:	2301      	movs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e001      	b.n	800281e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d116      	bne.n	8002852 <vTaskStartScheduler+0x82>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	613b      	str	r3, [r7, #16]
}
 8002836:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <vTaskStartScheduler+0xb4>)
 800283a:	f04f 32ff 	mov.w	r2, #4294967295
 800283e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <vTaskStartScheduler+0xb8>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <vTaskStartScheduler+0xbc>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800284c:	f000 fbc0 	bl	8002fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002850:	e00e      	b.n	8002870 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d10a      	bne.n	8002870 <vTaskStartScheduler+0xa0>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	60fb      	str	r3, [r7, #12]
}
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <vTaskStartScheduler+0x9e>
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	08003798 	.word	0x08003798
 800287c:	08002c0d 	.word	0x08002c0d
 8002880:	200003fc 	.word	0x200003fc
 8002884:	200003f8 	.word	0x200003f8
 8002888:	200003e4 	.word	0x200003e4
 800288c:	200003dc 	.word	0x200003dc

08002890 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <vTaskSuspendAll+0x18>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <vTaskSuspendAll+0x18>)
 800289c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	20000400 	.word	0x20000400

080028ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <xTaskResumeAll+0x114>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	603b      	str	r3, [r7, #0]
}
 80028d4:	bf00      	nop
 80028d6:	e7fe      	b.n	80028d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028d8:	f000 fc1c 	bl	8003114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028dc:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <xTaskResumeAll+0x114>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	4a37      	ldr	r2, [pc, #220]	; (80029c0 <xTaskResumeAll+0x114>)
 80028e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <xTaskResumeAll+0x114>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d161      	bne.n	80029b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028ee:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <xTaskResumeAll+0x118>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d05d      	beq.n	80029b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028f6:	e02e      	b.n	8002956 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <xTaskResumeAll+0x11c>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3318      	adds	r3, #24
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fd72 	bl	80023ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3304      	adds	r3, #4
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fd6d 	bl	80023ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	2201      	movs	r2, #1
 800291a:	409a      	lsls	r2, r3
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <xTaskResumeAll+0x120>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <xTaskResumeAll+0x120>)
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <xTaskResumeAll+0x124>)
 8002934:	441a      	add	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3304      	adds	r3, #4
 800293a:	4619      	mov	r1, r3
 800293c:	4610      	mov	r0, r2
 800293e:	f7ff fcf9 	bl	8002334 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <xTaskResumeAll+0x128>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <xTaskResumeAll+0x12c>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <xTaskResumeAll+0x11c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1cc      	bne.n	80028f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002964:	f000 fa08 	bl	8002d78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <xTaskResumeAll+0x130>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002974:	f000 f836 	bl	80029e4 <xTaskIncrementTick>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <xTaskResumeAll+0x12c>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f1      	bne.n	8002974 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <xTaskResumeAll+0x130>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <xTaskResumeAll+0x12c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <xTaskResumeAll+0x134>)
 80029a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029b2:	f000 fbdf 	bl	8003174 <vPortExitCritical>

	return xAlreadyYielded;
 80029b6:	68bb      	ldr	r3, [r7, #8]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000400 	.word	0x20000400
 80029c4:	200003d8 	.word	0x200003d8
 80029c8:	20000398 	.word	0x20000398
 80029cc:	200003e0 	.word	0x200003e0
 80029d0:	200002dc 	.word	0x200002dc
 80029d4:	200002d8 	.word	0x200002d8
 80029d8:	200003ec 	.word	0x200003ec
 80029dc:	200003e8 	.word	0x200003e8
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029ee:	4b4e      	ldr	r3, [pc, #312]	; (8002b28 <xTaskIncrementTick+0x144>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 808e 	bne.w	8002b14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029f8:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <xTaskIncrementTick+0x148>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <xTaskIncrementTick+0x148>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d120      	bne.n	8002a4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <xTaskIncrementTick+0x14c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <xTaskIncrementTick+0x48>
	__asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	603b      	str	r3, [r7, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <xTaskIncrementTick+0x46>
 8002a2c:	4b40      	ldr	r3, [pc, #256]	; (8002b30 <xTaskIncrementTick+0x14c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <xTaskIncrementTick+0x150>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <xTaskIncrementTick+0x14c>)
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4a3e      	ldr	r2, [pc, #248]	; (8002b34 <xTaskIncrementTick+0x150>)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <xTaskIncrementTick+0x154>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <xTaskIncrementTick+0x154>)
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	f000 f995 	bl	8002d78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <xTaskIncrementTick+0x158>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d348      	bcc.n	8002aea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <xTaskIncrementTick+0x14c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a62:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <xTaskIncrementTick+0x158>)
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	601a      	str	r2, [r3, #0]
					break;
 8002a6a:	e03e      	b.n	8002aea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <xTaskIncrementTick+0x14c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d203      	bcs.n	8002a8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a84:	4a2d      	ldr	r2, [pc, #180]	; (8002b3c <xTaskIncrementTick+0x158>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a8a:	e02e      	b.n	8002aea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fcac 	bl	80023ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3318      	adds	r3, #24
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fca3 	bl	80023ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	2201      	movs	r2, #1
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <xTaskIncrementTick+0x15c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <xTaskIncrementTick+0x15c>)
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <xTaskIncrementTick+0x160>)
 8002ac8:	441a      	add	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3304      	adds	r3, #4
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f7ff fc2f 	bl	8002334 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <xTaskIncrementTick+0x164>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3b9      	bcc.n	8002a58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ae8:	e7b6      	b.n	8002a58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <xTaskIncrementTick+0x164>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	4914      	ldr	r1, [pc, #80]	; (8002b44 <xTaskIncrementTick+0x160>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d901      	bls.n	8002b06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <xTaskIncrementTick+0x168>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	e004      	b.n	8002b1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <xTaskIncrementTick+0x16c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <xTaskIncrementTick+0x16c>)
 8002b1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002b1e:	697b      	ldr	r3, [r7, #20]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000400 	.word	0x20000400
 8002b2c:	200003dc 	.word	0x200003dc
 8002b30:	20000390 	.word	0x20000390
 8002b34:	20000394 	.word	0x20000394
 8002b38:	200003f0 	.word	0x200003f0
 8002b3c:	200003f8 	.word	0x200003f8
 8002b40:	200003e0 	.word	0x200003e0
 8002b44:	200002dc 	.word	0x200002dc
 8002b48:	200002d8 	.word	0x200002d8
 8002b4c:	200003ec 	.word	0x200003ec
 8002b50:	200003e8 	.word	0x200003e8

08002b54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <vTaskSwitchContext+0xa4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <vTaskSwitchContext+0xa8>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b68:	e03f      	b.n	8002bea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <vTaskSwitchContext+0xa8>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <vTaskSwitchContext+0xac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
 8002b80:	f1c3 031f 	rsb	r3, r3, #31
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	491f      	ldr	r1, [pc, #124]	; (8002c04 <vTaskSwitchContext+0xb0>)
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	607b      	str	r3, [r7, #4]
}
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <vTaskSwitchContext+0x5a>
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <vTaskSwitchContext+0xb0>)
 8002bbc:	4413      	add	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d104      	bne.n	8002be0 <vTaskSwitchContext+0x8c>
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <vTaskSwitchContext+0xb4>)
 8002be8:	6013      	str	r3, [r2, #0]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000400 	.word	0x20000400
 8002bfc:	200003ec 	.word	0x200003ec
 8002c00:	200003e0 	.word	0x200003e0
 8002c04:	200002dc 	.word	0x200002dc
 8002c08:	200002d8 	.word	0x200002d8

08002c0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c14:	f000 f852 	bl	8002cbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <prvIdleTask+0x28>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d9f9      	bls.n	8002c14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <prvIdleTask+0x2c>)
 8002c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c30:	e7f0      	b.n	8002c14 <prvIdleTask+0x8>
 8002c32:	bf00      	nop
 8002c34:	200002dc 	.word	0x200002dc
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	e00c      	b.n	8002c62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <prvInitialiseTaskLists+0x60>)
 8002c54:	4413      	add	r3, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fb3f 	bl	80022da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d9ef      	bls.n	8002c48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c68:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <prvInitialiseTaskLists+0x64>)
 8002c6a:	f7ff fb36 	bl	80022da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c6e:	480d      	ldr	r0, [pc, #52]	; (8002ca4 <prvInitialiseTaskLists+0x68>)
 8002c70:	f7ff fb33 	bl	80022da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c74:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <prvInitialiseTaskLists+0x6c>)
 8002c76:	f7ff fb30 	bl	80022da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c7a:	480c      	ldr	r0, [pc, #48]	; (8002cac <prvInitialiseTaskLists+0x70>)
 8002c7c:	f7ff fb2d 	bl	80022da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c80:	480b      	ldr	r0, [pc, #44]	; (8002cb0 <prvInitialiseTaskLists+0x74>)
 8002c82:	f7ff fb2a 	bl	80022da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <prvInitialiseTaskLists+0x78>)
 8002c88:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <prvInitialiseTaskLists+0x64>)
 8002c8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <prvInitialiseTaskLists+0x7c>)
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <prvInitialiseTaskLists+0x68>)
 8002c90:	601a      	str	r2, [r3, #0]
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200002dc 	.word	0x200002dc
 8002ca0:	20000368 	.word	0x20000368
 8002ca4:	2000037c 	.word	0x2000037c
 8002ca8:	20000398 	.word	0x20000398
 8002cac:	200003ac 	.word	0x200003ac
 8002cb0:	200003c4 	.word	0x200003c4
 8002cb4:	20000390 	.word	0x20000390
 8002cb8:	20000394 	.word	0x20000394

08002cbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cc2:	e019      	b.n	8002cf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002cc4:	f000 fa26 	bl	8003114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc8:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <prvCheckTasksWaitingTermination+0x50>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fb8a 	bl	80023ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <prvCheckTasksWaitingTermination+0x54>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <prvCheckTasksWaitingTermination+0x54>)
 8002ce2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <prvCheckTasksWaitingTermination+0x58>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <prvCheckTasksWaitingTermination+0x58>)
 8002cec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002cee:	f000 fa41 	bl	8003174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f810 	bl	8002d18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <prvCheckTasksWaitingTermination+0x58>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e1      	bne.n	8002cc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200003ac 	.word	0x200003ac
 8002d10:	200003d8 	.word	0x200003d8
 8002d14:	200003c0 	.word	0x200003c0

08002d18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d108      	bne.n	8002d3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fb9e 	bl	8003470 <vPortFree>
				vPortFree( pxTCB );
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fb9b 	bl	8003470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d3a:	e018      	b.n	8002d6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d103      	bne.n	8002d4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fb92 	bl	8003470 <vPortFree>
	}
 8002d4c:	e00f      	b.n	8002d6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d00a      	beq.n	8002d6e <prvDeleteTCB+0x56>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	60fb      	str	r3, [r7, #12]
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <prvDeleteTCB+0x54>
	}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <prvResetNextTaskUnblockTime+0x38>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <prvResetNextTaskUnblockTime+0x3c>)
 8002d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d90:	e008      	b.n	8002da4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <prvResetNextTaskUnblockTime+0x38>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <prvResetNextTaskUnblockTime+0x3c>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	20000390 	.word	0x20000390
 8002db4:	200003f8 	.word	0x200003f8

08002db8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <xTaskGetSchedulerState+0x34>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	e008      	b.n	8002dde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <xTaskGetSchedulerState+0x38>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	e001      	b.n	8002dde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002dde:	687b      	ldr	r3, [r7, #4]
	}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	200003e4 	.word	0x200003e4
 8002df0:	20000400 	.word	0x20000400

08002df4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002dfe:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff faef 	bl	80023ee <uxListRemove>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	4a20      	ldr	r2, [pc, #128]	; (8002eac <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d10a      	bne.n	8002e4c <prvAddCurrentTaskToDelayedList+0x58>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3304      	adds	r3, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	481a      	ldr	r0, [pc, #104]	; (8002eb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002e46:	f7ff fa75 	bl	8002334 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e4a:	e026      	b.n	8002e9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d209      	bcs.n	8002e78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7ff fa83 	bl	800237c <vListInsert>
}
 8002e76:	e010      	b.n	8002e9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f7ff fa79 	bl	800237c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d202      	bcs.n	8002e9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6013      	str	r3, [r2, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200003dc 	.word	0x200003dc
 8002ea8:	200002d8 	.word	0x200002d8
 8002eac:	200003e0 	.word	0x200003e0
 8002eb0:	200003c4 	.word	0x200003c4
 8002eb4:	20000394 	.word	0x20000394
 8002eb8:	20000390 	.word	0x20000390
 8002ebc:	200003f8 	.word	0x200003f8

08002ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3b04      	subs	r3, #4
 8002ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b04      	subs	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3b04      	subs	r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <pxPortInitialiseStack+0x64>)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b14      	subs	r3, #20
 8002efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b04      	subs	r3, #4
 8002f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f06f 0202 	mvn.w	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3b20      	subs	r3, #32
 8002f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	08002f29 	.word	0x08002f29

08002f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <prvTaskExitError+0x54>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d00a      	beq.n	8002f52 <prvTaskExitError+0x2a>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	60fb      	str	r3, [r7, #12]
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <prvTaskExitError+0x28>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	60bb      	str	r3, [r7, #8]
}
 8002f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002f66:	bf00      	nop
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0fc      	beq.n	8002f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <pxCurrentTCBConst2>)
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	6808      	ldr	r0, [r1, #0]
 8002f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8a:	f380 8809 	msr	PSP, r0
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f04f 0000 	mov.w	r0, #0
 8002f96:	f380 8811 	msr	BASEPRI, r0
 8002f9a:	4770      	bx	lr
 8002f9c:	f3af 8000 	nop.w

08002fa0 <pxCurrentTCBConst2>:
 8002fa0:	200002d8 	.word	0x200002d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop

08002fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002fa8:	4808      	ldr	r0, [pc, #32]	; (8002fcc <prvPortStartFirstTask+0x24>)
 8002faa:	6800      	ldr	r0, [r0, #0]
 8002fac:	6800      	ldr	r0, [r0, #0]
 8002fae:	f380 8808 	msr	MSP, r0
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f380 8814 	msr	CONTROL, r0
 8002fba:	b662      	cpsie	i
 8002fbc:	b661      	cpsie	f
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	df00      	svc	0
 8002fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002fca:	bf00      	nop
 8002fcc:	e000ed08 	.word	0xe000ed08

08002fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002fd6:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <xPortStartScheduler+0x120>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a46      	ldr	r2, [pc, #280]	; (80030f4 <xPortStartScheduler+0x124>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10a      	bne.n	8002ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	613b      	str	r3, [r7, #16]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <xPortStartScheduler+0x120>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	; (80030f8 <xPortStartScheduler+0x128>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10a      	bne.n	8003016 <xPortStartScheduler+0x46>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	60fb      	str	r3, [r7, #12]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <xPortStartScheduler+0x12c>)
 8003018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <xPortStartScheduler+0x130>)
 800303c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <xPortStartScheduler+0x134>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003044:	e009      	b.n	800305a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003046:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <xPortStartScheduler+0x134>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <xPortStartScheduler+0x134>)
 800304e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d0ef      	beq.n	8003046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003066:	4b27      	ldr	r3, [pc, #156]	; (8003104 <xPortStartScheduler+0x134>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00a      	beq.n	8003088 <xPortStartScheduler+0xb8>
	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	60bb      	str	r3, [r7, #8]
}
 8003084:	bf00      	nop
 8003086:	e7fe      	b.n	8003086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <xPortStartScheduler+0x134>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <xPortStartScheduler+0x134>)
 8003090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <xPortStartScheduler+0x134>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800309a:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <xPortStartScheduler+0x134>)
 800309c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <xPortStartScheduler+0x138>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a17      	ldr	r2, [pc, #92]	; (8003108 <xPortStartScheduler+0x138>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <xPortStartScheduler+0x138>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <xPortStartScheduler+0x138>)
 80030b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80030be:	f000 f8dd 	bl	800327c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <xPortStartScheduler+0x13c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80030c8:	f000 f8fc 	bl	80032c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <xPortStartScheduler+0x140>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <xPortStartScheduler+0x140>)
 80030d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80030d8:	f7ff ff66 	bl	8002fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80030dc:	f7ff fd3a 	bl	8002b54 <vTaskSwitchContext>
	prvTaskExitError();
 80030e0:	f7ff ff22 	bl	8002f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000ed00 	.word	0xe000ed00
 80030f4:	410fc271 	.word	0x410fc271
 80030f8:	410fc270 	.word	0x410fc270
 80030fc:	e000e400 	.word	0xe000e400
 8003100:	20000404 	.word	0x20000404
 8003104:	20000408 	.word	0x20000408
 8003108:	e000ed20 	.word	0xe000ed20
 800310c:	2000000c 	.word	0x2000000c
 8003110:	e000ef34 	.word	0xe000ef34

08003114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	607b      	str	r3, [r7, #4]
}
 800312c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800312e:	4b0f      	ldr	r3, [pc, #60]	; (800316c <vPortEnterCritical+0x58>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <vPortEnterCritical+0x58>)
 8003136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <vPortEnterCritical+0x58>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d10f      	bne.n	8003160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <vPortEnterCritical+0x5c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <vPortEnterCritical+0x4c>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	603b      	str	r3, [r7, #0]
}
 800315c:	bf00      	nop
 800315e:	e7fe      	b.n	800315e <vPortEnterCritical+0x4a>
	}
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	2000000c 	.word	0x2000000c
 8003170:	e000ed04 	.word	0xe000ed04

08003174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <vPortExitCritical+0x50>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <vPortExitCritical+0x24>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	607b      	str	r3, [r7, #4]
}
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <vPortExitCritical+0x50>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <vPortExitCritical+0x50>)
 80031a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <vPortExitCritical+0x50>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <vPortExitCritical+0x42>
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	2000000c 	.word	0x2000000c
	...

080031d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031d0:	f3ef 8009 	mrs	r0, PSP
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <pxCurrentTCBConst>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f01e 0f10 	tst.w	lr, #16
 80031e0:	bf08      	it	eq
 80031e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ea:	6010      	str	r0, [r2, #0]
 80031ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80031f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031f4:	f380 8811 	msr	BASEPRI, r0
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f7ff fca8 	bl	8002b54 <vTaskSwitchContext>
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f380 8811 	msr	BASEPRI, r0
 800320c:	bc09      	pop	{r0, r3}
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	6808      	ldr	r0, [r1, #0]
 8003212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003216:	f01e 0f10 	tst.w	lr, #16
 800321a:	bf08      	it	eq
 800321c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003220:	f380 8809 	msr	PSP, r0
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	f3af 8000 	nop.w

08003230 <pxCurrentTCBConst>:
 8003230:	200002d8 	.word	0x200002d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop

08003238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	607b      	str	r3, [r7, #4]
}
 8003250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003252:	f7ff fbc7 	bl	80029e4 <xTaskIncrementTick>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <xPortSysTickHandler+0x40>)
 800325e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	2300      	movs	r3, #0
 8003266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f383 8811 	msr	BASEPRI, r3
}
 800326e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <vPortSetupTimerInterrupt+0x34>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <vPortSetupTimerInterrupt+0x38>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <vPortSetupTimerInterrupt+0x3c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <vPortSetupTimerInterrupt+0x40>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <vPortSetupTimerInterrupt+0x44>)
 800329a:	3b01      	subs	r3, #1
 800329c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <vPortSetupTimerInterrupt+0x34>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010
 80032b4:	e000e018 	.word	0xe000e018
 80032b8:	20000000 	.word	0x20000000
 80032bc:	10624dd3 	.word	0x10624dd3
 80032c0:	e000e014 	.word	0xe000e014

080032c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80032c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80032d4 <vPortEnableVFP+0x10>
 80032c8:	6801      	ldr	r1, [r0, #0]
 80032ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032ce:	6001      	str	r1, [r0, #0]
 80032d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80032d2:	bf00      	nop
 80032d4:	e000ed88 	.word	0xe000ed88

080032d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80032e4:	f7ff fad4 	bl	8002890 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80032e8:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <pvPortMalloc+0x180>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80032f0:	f000 f920 	bl	8003534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <pvPortMalloc+0x184>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 8093 	bne.w	8003428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01d      	beq.n	8003344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003308:	2208      	movs	r2, #8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	2b00      	cmp	r3, #0
 8003318:	d014      	beq.n	8003344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f023 0307 	bic.w	r3, r3, #7
 8003320:	3308      	adds	r3, #8
 8003322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <pvPortMalloc+0x6c>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	617b      	str	r3, [r7, #20]
}
 8003340:	bf00      	nop
 8003342:	e7fe      	b.n	8003342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d06e      	beq.n	8003428 <pvPortMalloc+0x150>
 800334a:	4b45      	ldr	r3, [pc, #276]	; (8003460 <pvPortMalloc+0x188>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	d869      	bhi.n	8003428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003354:	4b43      	ldr	r3, [pc, #268]	; (8003464 <pvPortMalloc+0x18c>)
 8003356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003358:	4b42      	ldr	r3, [pc, #264]	; (8003464 <pvPortMalloc+0x18c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800335e:	e004      	b.n	800336a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	429a      	cmp	r2, r3
 8003372:	d903      	bls.n	800337c <pvPortMalloc+0xa4>
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f1      	bne.n	8003360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <pvPortMalloc+0x180>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	429a      	cmp	r2, r3
 8003384:	d050      	beq.n	8003428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2208      	movs	r2, #8
 800338c:	4413      	add	r3, r2
 800338e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	2308      	movs	r3, #8
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d91f      	bls.n	80033e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <pvPortMalloc+0xf8>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	613b      	str	r3, [r7, #16]
}
 80033cc:	bf00      	nop
 80033ce:	e7fe      	b.n	80033ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033e2:	69b8      	ldr	r0, [r7, #24]
 80033e4:	f000 f908 	bl	80035f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033e8:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <pvPortMalloc+0x188>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <pvPortMalloc+0x188>)
 80033f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <pvPortMalloc+0x188>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <pvPortMalloc+0x190>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d203      	bcs.n	800340a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <pvPortMalloc+0x188>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <pvPortMalloc+0x190>)
 8003408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <pvPortMalloc+0x184>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	431a      	orrs	r2, r3
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <pvPortMalloc+0x194>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	4a11      	ldr	r2, [pc, #68]	; (800346c <pvPortMalloc+0x194>)
 8003426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003428:	f7ff fa40 	bl	80028ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <pvPortMalloc+0x174>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	60fb      	str	r3, [r7, #12]
}
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <pvPortMalloc+0x172>
	return pvReturn;
 800344c:	69fb      	ldr	r3, [r7, #28]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20004014 	.word	0x20004014
 800345c:	20004028 	.word	0x20004028
 8003460:	20004018 	.word	0x20004018
 8003464:	2000400c 	.word	0x2000400c
 8003468:	2000401c 	.word	0x2000401c
 800346c:	20004020 	.word	0x20004020

08003470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d04d      	beq.n	800351e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003482:	2308      	movs	r3, #8
 8003484:	425b      	negs	r3, r3
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4413      	add	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <vPortFree+0xb8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <vPortFree+0x44>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	60fb      	str	r3, [r7, #12]
}
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <vPortFree+0x62>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	60bb      	str	r3, [r7, #8]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4b14      	ldr	r3, [pc, #80]	; (8003528 <vPortFree+0xb8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01e      	beq.n	800351e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d11a      	bne.n	800351e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <vPortFree+0xb8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	401a      	ands	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80034f8:	f7ff f9ca 	bl	8002890 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <vPortFree+0xbc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4413      	add	r3, r2
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <vPortFree+0xbc>)
 8003508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800350a:	6938      	ldr	r0, [r7, #16]
 800350c:	f000 f874 	bl	80035f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <vPortFree+0xc0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	4a06      	ldr	r2, [pc, #24]	; (8003530 <vPortFree+0xc0>)
 8003518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800351a:	f7ff f9c7 	bl	80028ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20004028 	.word	0x20004028
 800352c:	20004018 	.word	0x20004018
 8003530:	20004024 	.word	0x20004024

08003534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800353a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800353e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <prvHeapInit+0xac>)
 8003542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3307      	adds	r3, #7
 8003552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0307 	bic.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <prvHeapInit+0xac>)
 8003564:	4413      	add	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <prvHeapInit+0xb0>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <prvHeapInit+0xb0>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	4413      	add	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003580:	2208      	movs	r2, #8
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0307 	bic.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <prvHeapInit+0xb4>)
 8003594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <prvHeapInit+0xb4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <prvHeapInit+0xb4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	1ad2      	subs	r2, r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <prvHeapInit+0xb4>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <prvHeapInit+0xb8>)
 80035c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <prvHeapInit+0xbc>)
 80035ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <prvHeapInit+0xc0>)
 80035ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035d2:	601a      	str	r2, [r3, #0]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	2000040c 	.word	0x2000040c
 80035e4:	2000400c 	.word	0x2000400c
 80035e8:	20004014 	.word	0x20004014
 80035ec:	2000401c 	.word	0x2000401c
 80035f0:	20004018 	.word	0x20004018
 80035f4:	20004028 	.word	0x20004028

080035f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003600:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <prvInsertBlockIntoFreeList+0xac>)
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e002      	b.n	800360c <prvInsertBlockIntoFreeList+0x14>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d8f7      	bhi.n	8003606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4413      	add	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	d108      	bne.n	800363a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	441a      	add	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	441a      	add	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d118      	bne.n	8003680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d00d      	beq.n	8003676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e008      	b.n	8003688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e003      	b.n	8003688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d002      	beq.n	8003696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	2000400c 	.word	0x2000400c
 80036a8:	20004014 	.word	0x20004014

080036ac <__libc_init_array>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	4d0d      	ldr	r5, [pc, #52]	; (80036e4 <__libc_init_array+0x38>)
 80036b0:	4c0d      	ldr	r4, [pc, #52]	; (80036e8 <__libc_init_array+0x3c>)
 80036b2:	1b64      	subs	r4, r4, r5
 80036b4:	10a4      	asrs	r4, r4, #2
 80036b6:	2600      	movs	r6, #0
 80036b8:	42a6      	cmp	r6, r4
 80036ba:	d109      	bne.n	80036d0 <__libc_init_array+0x24>
 80036bc:	4d0b      	ldr	r5, [pc, #44]	; (80036ec <__libc_init_array+0x40>)
 80036be:	4c0c      	ldr	r4, [pc, #48]	; (80036f0 <__libc_init_array+0x44>)
 80036c0:	f000 f820 	bl	8003704 <_init>
 80036c4:	1b64      	subs	r4, r4, r5
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	2600      	movs	r6, #0
 80036ca:	42a6      	cmp	r6, r4
 80036cc:	d105      	bne.n	80036da <__libc_init_array+0x2e>
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d4:	4798      	blx	r3
 80036d6:	3601      	adds	r6, #1
 80036d8:	e7ee      	b.n	80036b8 <__libc_init_array+0xc>
 80036da:	f855 3b04 	ldr.w	r3, [r5], #4
 80036de:	4798      	blx	r3
 80036e0:	3601      	adds	r6, #1
 80036e2:	e7f2      	b.n	80036ca <__libc_init_array+0x1e>
 80036e4:	080037c0 	.word	0x080037c0
 80036e8:	080037c0 	.word	0x080037c0
 80036ec:	080037c0 	.word	0x080037c0
 80036f0:	080037c4 	.word	0x080037c4

080036f4 <memset>:
 80036f4:	4402      	add	r2, r0
 80036f6:	4603      	mov	r3, r0
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d100      	bne.n	80036fe <memset+0xa>
 80036fc:	4770      	bx	lr
 80036fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003702:	e7f9      	b.n	80036f8 <memset+0x4>

08003704 <_init>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr

08003710 <_fini>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr
